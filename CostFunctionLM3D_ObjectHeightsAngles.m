function [F,J] = CostFunctionLM3D_ObjectHeightsAngles(params,h,cy,mu,sigma,Hx,Hy,xang,yang,fhat,pxhat,pyhat,sigma_N,imageSize)
% Inputs:
% params - Camera parameters to optimize
% h - 1xN object heights (in pixels)
% cy - 1xN y-coordinate of contact point
% mu - 1xN mean of real-world object height (in centimeters)
% sigma - 1xN std dev of real-world object height (in centimeters)
% Hx - X-coordinates of annotated horizon line
% Hy - Y-coordinates of annotated horizon line
% xang - 3xN X coordinates of right angles
% yang - 3xN Y coordinates of right angles
% fhat - Initial estimate of focal length
% py - Y coordinate of principal point
% sigma_N - std dev of pixel labeling error

% Hyper-parameters:
lambda_f = 0.01; % Regularization weight for focal length
lambda_pp = 0.01; % Regularization weight for principal point
Cy_mean = 170;
Cy_std = 50;

% Get parameters to optimize:
Cy = params(1); % Camera height
wx = params(2); % Camera pitch angle
wz = params(3); % Camera pitch angle
f = params(4); % Focal length
px = params(5); % Principal point
py = params(6); % Principal point

% Get camera calibration matrix:
K = [f 0 px; 0 f py; 0 0 1];

% Camera rotation:
t = sqrt(wx^2+wz^2)+eps;
nx = wx/t;
nz = wz/t;
N = [0 -nz 0; nz 0 -nx; 0 nx 0];
R = eye(3) + sin(t)*N + (1-cos(t))*N*N;

% Get camera center:
C = [0; Cy; 0];

% Get camera matrix:
P = K*R*[eye(3) -C];

% Initialize cost and Jacobian:
F = []; J = [];

%%% Object height constraints:
if length(h) > 0
  % Get horizon line:
  lh = cross(P(:,1),P(:,3));

  % Get y-coordinate of horizon line (at center of image):
  vy = -lh(3)/lh(2);

  % Height error (in pixels), weighted by uncertainty in real-world
  % object height and labeling error (in pixels):
  w = 1./(sigma.*(vy-cy)./Cy + sigma_N); % Standard deviation
  F = w.*(mu.*(vy-cy)./Cy - h);
% $$$   J = Jacobian_ObjectHeights(Cy,t,f,py,h,cy,mu,sigma,sigma_N)';
  J = Jacobian_ObjectHeights(Cy,wx,wz,f,px,py,h,cy,mu,sigma,sigma_N)';
end

%%% Horizon line constraints:
if length(Hy) > 0
  Nv = size(Hy,2);

  % Get horizon line:
  lh = cross(P(:,1),P(:,3));

  % Horizon line error (in pixels), weighted by labeling error (in pixels):
  w = 1/sigma_N;
  Fh = w*(Hx(:).*lh(1)+Hy(:).*lh(2)+lh(3))/sqrt(lh(1).^2+lh(2).^2);
  F = [F Fh'];
  J = [J; Jacobian_HorizonLine(Hx(:)',Hy(:)',f,px,py,wx,wz,sigma_N)'];
end

%%% Angle constraints:
if length(xang) > 0
  Na = size(xang,2);
  
  % Homography with ground plane:
  H = P(:,[1 3 4]);

  % Get line 1 passing through points 1 and 2:
  l1 = cross([xang(1,:); yang(1,:); ones(1,Na)],[xang(2,:); yang(2,:); ones(1,Na)]);
  
  % Get line 2 (perpendicular to line 1 on the world plane) in image:
  a = (H(:,1)'*l1);
  b = (H(:,2)'*l1);
  aa = a.*(H(2,1)-H(3,1)*yang(2,:))+b.*(H(2,2)-H(3,2)*yang(2,:));
  bb = a.*(H(3,1)*xang(2,:)-H(1,1))+b.*(H(3,2)*xang(2,:)-H(1,2));
% $$$   theta = atan2(aa,bb); aa = sin(theta); bb = cos(theta);
  l2 = [aa; bb; -xang(2,:).*aa-yang(2,:).*bb];
  
  % Get perpendicular distance of (x3,y3) to line 2:
  w = 1/sigma_N;

  % Get components for perpendicular distance of (x3,y3) to line 2:
  F1 = xang(3,:).*l2(1,:)+yang(3,:).*l2(2,:)+l2(3,:);
  F2 = sqrt(l2(1,:).^2+l2(2,:).^2);
  F = [F w*F1./F2];
  
  [dxdCy,dxdwx,dxdwz,dxdf,dxdpx,dxdpy,dydCy,dydwx,dydwz,dydf,dydpx,dydpy] = Jacobian_RightAnglesGround(xang(3,:),yang(3,:),xang(2,:),yang(2,:),l1(1,:),l1(2,:),l1(3,:),wx,wz,f,px,py,sigma_N);
  J = [J; [w*(F2.*dxdCy-F1.*dydCy)./F2.^2; ...
           w*(F2.*dxdwx-F1.*dydwx)./F2.^2; ...
           w*(F2.*dxdwz-F1.*dydwz)./F2.^2; ...
           w*(F2.*dxdf-F1.*dydf)./F2.^2; ...
           w*(F2.*dxdpx-F1.*dydpx)./F2.^2; ...
           w*(F2.*dxdpy-F1.*dydpy)./F2.^2]'];
end

% Regularization on camera height:
F(end+1) = (Cy-Cy_mean)/Cy_std;
J(end+1,:) = [1/Cy_std 0 0 0 0 0];

% Regularization on focal length:
F(end+1) = lambda_f*(f-fhat);
J(end+1,:) = [0 0 0 lambda_f 0 0];

% Regularization on principal point:
F(end+1) = lambda_pp*(px-pxhat);
J(end+1,:) = [0 0 0 0 lambda_pp 0];
F(end+1) = lambda_pp*(py-pyhat);
J(end+1,:) = [0 0 0 0 0 lambda_pp];

return;

function J = Jacobian_ObjectHeights(Cy,wx,wz,f,px,py,h,cy,mu,sigma,sigma_N)
%    This function was generated by the Symbolic Math Toolbox version 5.2.
%    25-Feb-2013 11:07:55

t2 = wz.^2;
t3 = wx.^2;
t4 = t2 + t3;
t5 = t4.^(1./2);
t6 = eps + t5;
t7 = 1./t6.^2;
t8 = cos(t6);
t9 = t8 - 1;
t10 = t3.*t7.*t9;
t11 = t10 + 1;
t12 = t2.*t7.*t9;
t13 = t12 + 1;
t14 = f.*t13;
t20 = px.*t7.*t9.*wx.*wz;
t15 = t14 - t20;
t16 = px.*t11;
t22 = f.*t7.*t9.*wx.*wz;
t17 = t16 - t22;
t18 = sin(t6);
t19 = 1./t6;
t21 = t11.*t15;
t23 = t17.*t7.*t9.*wx.*wz;
t24 = t21 + t23;
t25 = 1./t24;
t26 = py.*t11;
t34 = f.*t18.*t19.*wx;
t27 = t26 - t34;
t28 = t15.*t27;
t29 = f.*t18.*t19.*wz;
t35 = py.*t7.*t9.*wx.*wz;
t30 = t29 - t35;
t36 = t17.*t30;
t31 = t28 - t36;
t37 = t25.*t31;
t32 = cy - t37;
t33 = 1./Cy.^2;
t38 = 1./Cy;
t55 = sigma.*t32.*t38;
t39 = sigma_N - t55;
t40 = 1./t4.^(1./2);
t41 = 1./t6.^3;
t42 = t18.*t3.*t40.*t7.*wx;
t43 = 2.*t3.*t40.*t41.*t9.*wx;
t51 = 2.*t7.*t9.*wx;
t44 = t42 + t43 - t51;
t45 = t18.*t2.*t40.*t7.*wx;
t46 = 2.*t2.*t40.*t41.*t9.*wx;
t47 = t45 + t46;
t48 = f.*t47;
t49 = px.*t7.*t9.*wz;
t62 = px.*t18.*t3.*t40.*t7.*wz;
t63 = 2.*px.*t3.*t40.*t41.*t9.*wz;
t50 = t48 + t49 - t62 - t63;
t52 = px.*t44;
t53 = f.*t7.*t9.*wz;
t70 = f.*t18.*t3.*t40.*t7.*wz;
t71 = 2.*f.*t3.*t40.*t41.*t9.*wz;
t54 = t52 + t53 - t70 - t71;
t56 = 1./t39;
t57 = py.*t44;
t58 = f.*t18.*t19;
t59 = f.*t19.*t3.*t40.*t8;
t60 = t57 + t58 + t59 - f.*t18.*t3.*t40.*t7;
t61 = t15.*t60;
t64 = t27.*t50;
t65 = f.*t19.*t40.*t8.*wx.*wz;
t66 = py.*t18.*t3.*t40.*t7.*wz;
t67 = 2.*py.*t3.*t40.*t41.*t9.*wz;
t85 = f.*t18.*t40.*t7.*wx.*wz;
t68 = t65 + t66 + t67 - t85 - py.*t7.*t9.*wz;
t69 = t17.*t68;
t72 = t61 + t64 + t69 - t30.*t54;
t73 = t25.*t72;
t74 = 1./t24.^2;
t75 = t11.*t50;
t76 = t15.*t44;
t77 = t54.*t7.*t9.*wx.*wz;
t78 = t17.*t18.*t3.*t40.*t7.*wz;
t79 = 2.*t17.*t3.*t40.*t41.*t9.*wz;
t80 = t75 + t76 + t77 + t78 + t79 - t17.*t7.*t9.*wz;
t81 = t73 - t31.*t74.*t80;
t82 = mu.*t32.*t38;
t83 = h + t82;
t84 = 1./t39.^2;
t86 = t18.*t3.*t40.*t7.*wz;
t87 = 2.*t3.*t40.*t41.*t9.*wz;
t88 = t86 + t87;
t89 = t18.*t2.*t40.*t7.*wz;
t90 = 2.*t2.*t40.*t41.*t9.*wz;
t106 = 2.*t7.*t9.*wz;
t91 = t89 - t106 + t90;
t92 = f.*t91;
t93 = px.*t7.*t9.*wx;
t107 = px.*t18.*t2.*t40.*t7.*wx;
t108 = 2.*px.*t2.*t40.*t41.*t9.*wx;
t94 = t92 - t108 - t107 + t93;
t95 = px.*t88;
t96 = f.*t7.*t9.*wx;
t110 = f.*t18.*t2.*t40.*t7.*wx;
t111 = 2.*f.*t2.*t40.*t41.*t9.*wx;
t97 = t95 - t111 - t110 + t96;
t98 = f.*t19.*t2.*t40.*t8;
t99 = py.*t18.*t2.*t40.*t7.*wx;
t100 = 2.*py.*t2.*t40.*t41.*t9.*wx;
t101 = t100 + t58 + t98 + t99 - py.*t7.*t9.*wx - f.*t18.*t2.*t40.*t7;
t102 = t101.*t17;
t103 = py.*t88;
t104 = t103 + t65 - t85;
t105 = t104.*t15;
t109 = t27.*t94;
t112 = t102 + t105 + t109 - t30.*t97;
t113 = t112.*t25;
t114 = t15.*t88;
t115 = t11.*t94;
t116 = t7.*t9.*t97.*wx.*wz;
t117 = t17.*t18.*t2.*t40.*t7.*wx;
t118 = 2.*t17.*t2.*t40.*t41.*t9.*wx;
t119 = t114 + t115 + t116 + t117 + t118 - t17.*t7.*t9.*wx;
t120 = t113 - t119.*t31.*t74;
t121 = t13.*t27;
t122 = t30.*t7.*t9.*wx.*wz;
t123 = t121 + t122 - t15.*t18.*t19.*wx - t17.*t18.*t19.*wz;
t124 = t123.*t25;
t125 = t11.*t13;
t126 = 1./t6.^4;
t127 = t9.^2;
t128 = t125 - t126.*t127.*t2.*t3;
t129 = t124 - t128.*t31.*t74;
t130 = t11.*t30;
t131 = t27.*t7.*t9.*wx.*wz;
t132 = t130 + t131;
J = [mu.*t32.*t33.*t56 + sigma.*t32.*t33.*t83.*t84;- mu.*t38.*t56.*t81 - sigma.*t38.*t81.*t83.*t84;- mu.*t120.*t38.*t56 - sigma.*t120.*t38.*t83.*t84;mu.*t129.*t38.*t56 + sigma.*t129.*t38.*t83.*t84;- mu.*t132.*t25.*t38.*t56 - sigma.*t132.*t25.*t38.*t83.*t84;mu.*t38.*t56 + sigma.*t38.*t83.*t84];

return;


function J = Jacobian_HorizonLine(Hx,Hy,f,px,py,wx,wz,sigma_N)
%    This function was generated by the Symbolic Math Toolbox version 5.2.
%    22-Feb-2013 19:19:13

N = numel(Hx);

t2 = wx.^2;
t3 = wz.^2;
t4 = t2 + t3;
t5 = t4.^(1./2);
t6 = eps + t5;
t7 = 1./t6.^2;
t8 = cos(t6);
t9 = t8 - 1;
t10 = t2.*t7.*t9;
t11 = t10 + 1;
t12 = sin(t6);
t13 = 1./t6;
t23 = f.*t12.*t13.*wz;
t24 = py.*t7.*t9.*wx.*wz;
t25 = t23 - t24;
t29 = py.*t11;
t30 = f.*t12.*t13.*wx;
t31 = t29 - t30;
t54 = t11.*t25;
t55 = t31.*t7.*t9.*wx.*wz;
t14 = t54 + t55;
t16 = t3.*t7.*t9;
t17 = t16 + 1;
t18 = f.*t17;
t19 = px.*t7.*t9.*wx.*wz;
t20 = t18 - t19;
t43 = px.*t11;
t44 = f.*t7.*t9.*wx.*wz;
t45 = t43 - t44;
t57 = t11.*t20;
t58 = t45.*t7.*t9.*wx.*wz;
t15 = t57 + t58;
t21 = 1./t4.^(1./2);
t22 = 1./t6.^3;
t26 = t12.*t2.*t21.*t7.*wx;
t27 = 2.*t2.*t21.*t22.*t9.*wx;
t32 = 2.*t7.*t9.*wx;
t28 = t26 + t27 - t32;
t33 = py.*t28;
t34 = f.*t12.*t13;
t35 = f.*t13.*t2.*t21.*t8;
t74 = f.*t12.*t2.*t21.*t7;
t36 = t33 + t34 + t35 - t74;
t37 = t12.*t21.*t3.*t7.*wx;
t38 = 2.*t21.*t22.*t3.*t9.*wx;
t39 = t37 + t38;
t40 = f.*t39;
t41 = px.*t7.*t9.*wz;
t61 = px.*t12.*t2.*t21.*t7.*wz;
t62 = 2.*px.*t2.*t21.*t22.*t9.*wz;
t42 = t40 + t41 - t61 - t62;
t46 = f.*t13.*t21.*t8.*wx.*wz;
t47 = py.*t12.*t2.*t21.*t7.*wz;
t48 = 2.*py.*t2.*t21.*t22.*t9.*wz;
t71 = py.*t7.*t9.*wz;
t72 = f.*t12.*t21.*t7.*wx.*wz;
t49 = t46 + t47 + t48 - t71 - t72;
t50 = px.*t28;
t51 = f.*t7.*t9.*wz;
t65 = f.*t12.*t2.*t21.*t7.*wz;
t66 = 2.*f.*t2.*t21.*t22.*t9.*wz;
t52 = t50 + t51 - t65 - t66;
t53 = 1./sigma_N;
t56 = t14.^2;
t59 = t15.^2;
t60 = t56 + t59;
t63 = t11.*t42;
t64 = t20.*t28;
t67 = t52.*t7.*t9.*wx.*wz;
t68 = t12.*t2.*t21.*t45.*t7.*wz;
t69 = 2.*t2.*t21.*t22.*t45.*t9.*wz;
t70 = t63 + t64 + t67 + t68 + t69 - t45.*t7.*t9.*wz;
t73 = t25.*t28;
t75 = t36.*t7.*t9.*wx.*wz;
t76 = t12.*t2.*t21.*t31.*t7.*wz;
t77 = 2.*t2.*t21.*t22.*t31.*t9.*wz;
t78 = t73 + t75 + t76 + t77 - t11.*t49 - t31.*t7.*t9.*wz;
t79 = 1./t60.^(1./2);
t80 = t12.*t2.*t21.*t7.*wz;
t81 = 2.*t2.*t21.*t22.*t9.*wz;
t82 = t80 + t81;
t83 = t12.*t21.*t3.*t7.*wz;
t84 = 2.*t21.*t22.*t3.*t9.*wz;
t99 = 2.*t7.*t9.*wz;
t85 = t83 + t84 - t99;
t86 = f.*t85;
t87 = px.*t7.*t9.*wx;
t100 = px.*t12.*t21.*t3.*t7.*wx;
t101 = 2.*px.*t21.*t22.*t3.*t9.*wx;
t88 = t86 - t101 - t100 + t87;
t89 = px.*t82;
t90 = f.*t7.*t9.*wx;
t103 = f.*t12.*t21.*t3.*t7.*wx;
t104 = 2.*f.*t21.*t22.*t3.*t9.*wx;
t91 = t89 - t104 - t103 + t90;
t92 = f.*t13.*t21.*t3.*t8;
t93 = py.*t12.*t21.*t3.*t7.*wx;
t94 = 2.*py.*t21.*t22.*t3.*t9.*wx;
t109 = py.*t7.*t9.*wx;
t110 = f.*t12.*t21.*t3.*t7;
t95 = t34 - t110 - t109 + t92 + t93 + t94;
t96 = py.*t82;
t97 = t46 - t72 + t96;
t98 = t20.*t82;
t102 = t11.*t88;
t105 = t7.*t9.*t91.*wx.*wz;
t106 = t12.*t21.*t3.*t45.*t7.*wx;
t107 = 2.*t21.*t22.*t3.*t45.*t9.*wx;
t108 = t102 + t105 + t106 + t107 + t98 - t45.*t7.*t9.*wx;
t111 = t25.*t82;
t112 = t7.*t9.*t97.*wx.*wz;
t113 = t12.*t21.*t3.*t31.*t7.*wx;
t114 = 2.*t21.*t22.*t3.*t31.*t9.*wx;
t115 = t111 + t112 + t113 + t114 - t11.*t95 - t31.*t7.*t9.*wx;
t116 = 1./t60.^(3./2);
t117 = t20.*t31;
t118 = Hx.*t14;
t126 = Hy.*t15;
t127 = t25.*t45;
t119 = t117 + t118 - t126 - t127;
t120 = t11.*t17;
t121 = 1./t6.^4;
t122 = t9.^2;
t123 = t120 - t121.*t122.*t2.*t3;
t124 = t11.*t12.*t13.*wz;
t125 = t124 - t12.*t2.*t22.*t9.*wz;

J = [zeros(1,N);(t116.*t119.*t53.*(2.*t15.*t70 + 2.*t14.*t78))./2 - t53.*t79.*(Hx.*t78 - Hy.*t70 + t20.*t36 + t31.*t42 - t25.*t52 + t45.*t49);(t116.*t119.*t53.*(2.*t115.*t14 + 2.*t108.*t15))./2 - t53.*t79.*(Hx.*t115 - Hy.*t108 - t25.*t91 + t20.*t97 + t31.*t88 + t45.*t95);t53.*t79.*(Hx.*t125 - Hy.*t123 + t17.*t31 - t12.*t13.*t20.*wx - t12.*t13.*t45.*wz + t25.*t7.*t9.*wx.*wz) - (t116.*t119.*t53.*(2.*t125.*t14 + 2.*t123.*t15))./2;-t14.*t53.*t79*ones(1,N);t15.*t53.*t79*ones(1,N)];

return;


function [dxdCy,dxdwx,dxdwz,dxdf,dxdpx,dxdpy,dydCy,dydwx,dydwz,dydf,dydpx,dydpy] = Jacobian_RightAnglesGround(x,y,x2,y2,lx,ly,lz,wx,wz,f,px,py,sigma_N)

%    This function was generated by the Symbolic Math Toolbox version 5.2.
%    21-Feb-2013 11:03:13

N = length(x);

t2 = wx.^2;
t3 = wz.^2;
t4 = t2 + t3;
t5 = t4.^(1./2);
t6 = eps + t5;
t7 = 1./t6.^2;
t8 = cos(t6);
t9 = t8 - 1;
t10 = 1./t6;
t11 = sin(t6);
t12 = 1./t4.^(1./2);
t13 = 1./t6.^3;
t14 = t11.*t12.*t2.*t7.*wx;
t15 = 2.*t12.*t13.*t2.*t9.*wx;
t17 = 2.*t7.*t9.*wx;
t16 = t14 + t15 - t17;
t18 = t2.*t7.*t9;
t19 = t18 + 1;
t20 = f.*t10.*t11.*wx;
t21 = py.*t16;
t22 = f.*t10.*t11;
t23 = f.*t10.*t12.*t2.*t8;
t24 = f.*t10.*t11.*wz;
t25 = py.*t7.*t9.*wz;
t26 = f.*t11.*t12.*t7.*wx.*wz;
t57 = py.*t7.*t9.*wx.*wz;
t27 = t24 - t57;
t28 = ly.*t27;
t29 = t3.*t7.*t9;
t30 = t29 + 1;
t31 = f.*t30;
t70 = px.*t7.*t9.*wx.*wz;
t32 = t31 - t70;
t33 = lx.*t32;
t78 = lz.*t7.*t9.*wx.*wz;
t34 = t28 + t33 - t78;
t35 = f.*t10.*t12.*t8.*wx.*wz;
t36 = py.*t11.*t12.*t2.*t7.*wz;
t37 = t11.*t12.*t2.*t7.*wz.*y2;
t38 = 2.*py.*t12.*t13.*t2.*t9.*wz;
t39 = 2.*t12.*t13.*t2.*t9.*wz.*y2;
t56 = f.*t11.*t12.*t2.*t7;
t40 = t21 + t22 + t23 - t56;
t41 = ly.*t40;
t42 = px.*t16;
t43 = f.*t7.*t9.*wz;
t75 = f.*t11.*t12.*t2.*t7.*wz;
t76 = 2.*f.*t12.*t13.*t2.*t9.*wz;
t44 = t42 + t43 - t75 - t76;
t45 = lx.*t44;
t46 = lz.*t16;
t47 = t41 + t45 + t46;
t48 = t19.*y2;
t51 = py.*t19;
t49 = t20 + t48 - t51;
t50 = t47.*t49;
t52 = lz.*t19;
t53 = px.*t19;
t77 = f.*t7.*t9.*wx.*wz;
t54 = t53 - t77;
t55 = lx.*t54;
t58 = t7.*t9.*wx.*wz.*y2;
t59 = t35 - t26 - t25 + t36 + t38;
t60 = ly.*t59;
t61 = t11.*t12.*t3.*t7.*wx;
t62 = 2.*t12.*t13.*t3.*t9.*wx;
t63 = t61 + t62;
t64 = f.*t63;
t65 = px.*t7.*t9.*wz;
t71 = px.*t11.*t12.*t2.*t7.*wz;
t72 = 2.*px.*t12.*t13.*t2.*t9.*wz;
t66 = t64 + t65 - t71 - t72;
t67 = lz.*t11.*t12.*t2.*t7.*wz;
t68 = 2.*lz.*t12.*t13.*t2.*t9.*wz;
t73 = lx.*t66;
t74 = lz.*t7.*t9.*wz;
t69 = t60 + t67 + t68 - t73 - t74;
t79 = t20 - t51;
t90 = ly.*t79;
t80 = t52 + t55 - t90;
t81 = t7.*t9.*wx.*wz.*x2;
t82 = t31 - t70 + t81;
t83 = t69.*t82;
t84 = t19.*x2;
t85 = t77 - t53 + t84;
t86 = t47.*t85;
t87 = t11.*t12.*t2.*t7.*wz.*x2;
t88 = 2.*t12.*t13.*t2.*t9.*wz.*x2;
t177 = t7.*t9.*wz.*x2;
t89 = t64 - t177 + t65 - t71 - t72 + t87 + t88;
t91 = t16.*x2;
t92 = t75 - t43 - t42 + t76 + t91;
t93 = t80.*t92;
t178 = t34.*t89;
t94 = t83 - t178 + t86 + t93;
t95 = t11.*t12.*t2.*t7.*wz;
t96 = 2.*t12.*t13.*t2.*t9.*wz;
t97 = t95 + t96;
t98 = px.*t97;
t99 = f.*t7.*t9.*wx;
t100 = t11.*t12.*t3.*t7.*wz;
t101 = 2.*t12.*t13.*t3.*t9.*wz;
t112 = 2.*t7.*t9.*wz;
t102 = t100 + t101 - t112;
t103 = f.*t102;
t104 = px.*t7.*t9.*wx;
t105 = f.*t11.*t12.*t3.*t7.*wx;
t106 = 2.*f.*t12.*t13.*t3.*t9.*wx;
t107 = f.*t10.*t12.*t3.*t8;
t108 = py.*t11.*t12.*t3.*t7.*wx;
t109 = 2.*py.*t12.*t13.*t3.*t9.*wx;
t133 = py.*t7.*t9.*wx;
t134 = f.*t11.*t12.*t3.*t7;
t110 = t107 + t108 + t109 - t133 - t134 + t22;
t111 = ly.*t110;
t128 = px.*t11.*t12.*t3.*t7.*wx;
t130 = 2.*px.*t12.*t13.*t3.*t9.*wx;
t113 = t103 + t104 - t128 - t130;
t114 = lz.*t11.*t12.*t3.*t7.*wx;
t115 = 2.*lz.*t12.*t13.*t3.*t9.*wx;
t135 = lx.*t113;
t136 = lz.*t7.*t9.*wx;
t116 = t111 + t114 + t115 - t135 - t136;
t117 = t116.*t82;
t118 = t105 + t106 - t98 - t99;
t119 = lz.*t97;
t120 = py.*t97;
t121 = t120 - t26 + t35;
t122 = ly.*t121;
t137 = lx.*t118;
t123 = t119 + t122 - t137;
t124 = t123.*t85;
t125 = t97.*x2;
t126 = t105 + t106 + t125 - t98 - t99;
t127 = t126.*t80;
t129 = t11.*t12.*t3.*t7.*wx.*x2;
t131 = 2.*t12.*t13.*t3.*t9.*wx.*x2;
t132 = t24 - t57 + t58;
t187 = t97.*y2;
t138 = t120 - t187 - t26 + t35;
t139 = t116.*t132;
t140 = t123.*t49;
t141 = t7.*t9.*wx.*y2;
t189 = t11.*t12.*t3.*t7.*wx.*y2;
t190 = 2.*t12.*t13.*t3.*t9.*wx.*y2;
t142 = t107 + t108 + t109 - t133 - t134 + t141 - t189 - t190 + t22;
t143 = t142.*t34;
t188 = t138.*t80;
t144 = t139 + t140 + t143 - t188;
t145 = lx.*t30;
t146 = ly.*t10.*t11.*wz;
t147 = t145 + t146;
t148 = t132.*t147;
t149 = ly.*t10.*t11.*wx;
t150 = lx.*t7.*t9.*wx.*wz;
t151 = t149 + t150;
t152 = t151.*t49;
t153 = t10.*t11.*t34.*wz;
t193 = t10.*t11.*t80.*wx;
t154 = t148 + t152 + t153 - t193;
t155 = t151.*t85;
t156 = t147.*t82;
t157 = t30.*t34;
t194 = t7.*t80.*t9.*wx.*wz;
t158 = t155 + t156 + t157 - t194;
t159 = lx.*t19.*t49;
t160 = lx.*t132.*t7.*t9.*wx.*wz;
t161 = t159 + t160;
t162 = lx.*t19.*t85;
t163 = t34.*t7.*t9.*wx.*wz;
t164 = lx.*t7.*t82.*t9.*wx.*wz;
t169 = t19.*t80;
t165 = t162 + t163 + t164 - t169;
t166 = ly.*t19.*t85;
t167 = ly.*t7.*t82.*t9.*wx.*wz;
t168 = t166 + t167;
t170 = ly.*t19.*t49;
t171 = ly.*t132.*t7.*t9.*wx.*wz;
t172 = t163 - t169 + t170 + t171;
t179 = t49.*t80;
t180 = t132.*t34;
t173 = t180 - t179;
t175 = t34.*t82;
t176 = t80.*t85;
t174 = t175 - t176;
t181 = t25 + t26 - t35 - t36 + t37 - t38 + t39 - t7.*t9.*wz.*y2;
t182 = t21 + t22 + t23 - t56 - t16.*y2;
t183 = t132.*t69;
t184 = t183 + t50 - t181.*t34 - t182.*t80;
t185 = t179 - t180;
t186 = t174.^2;
t191 = t103 + t104 - t128 + t129 - t130 + t131 - t7.*t9.*wx.*x2;
t192 = t117 + t124 + t127 - t191.*t34;
t195 = t185.^2;
t196 = t186 + t195;
t197 = 1./t196.^(1./2);

dxdCy = zeros(1,N);
dxdwx = x.*(t50 - (t52 + t55 - ly.*(t20 - py.*t19)).*(t21 + t22 + t23 - t16.*y2 - f.*t11.*t12.*t2.*t7) - t34.*(t25 + t26 + t37 + t39 - t7.*t9.*wz.*y2 - f.*t10.*t12.*t8.*wx.*wz - py.*t11.*t12.*t2.*t7.*wz - 2.*py.*t12.*t13.*t2.*t9.*wz) + t69.*(t24 + t58 - py.*t7.*t9.*wx.*wz)) - t184.*x2 - t94.*y + t94.*y2;
dxdwz = t144.*x - y.*(t117 + t124 + t127 - t34.*(t103 + t104 + t129 + t131 - t7.*t9.*wx.*x2 - px.*t11.*t12.*t3.*t7.*wx - 2.*px.*t12.*t13.*t3.*t9.*wx)) - t144.*x2 + t192.*y2;
dxdf = t154.*x - t154.*x2 - t158.*y + t158.*y2;
dxdpx = t161.*x2 - t161.*x + t165.*y - t165.*y2;
dxdpy = t172.*x2 - t172.*x + t168.*y - t168.*y2;

dydCy = zeros(1,N);
dydwx = -(2.*t184.*t185 - 2.*t174.*t94)./(2.*(t173.^2 + t186).^(1./2));
dydwz = -(t197.*(2.*t144.*t185 - 2.*t174.*t192))./2;
dydf = t197.*(t158.*t174 - t154.*t185);
dydpx = -t197.*(t165.*t174 - t161.*t185);
dydpy = -t197.*(t168.*t174 - t172.*t185);

return;






% $$$ % Derivation for Jacobian_ObjectHeights
% $$$ 
% $$$ % Camera parameters:
% $$$ syms f px py
% $$$ syms Cy wx wz;
% $$$ syms EPS;
% $$$ 
% $$$ % Data:
% $$$ syms h cy mu sigma sigma_N
% $$$ 
% $$$ % Get camera calibration matrix:
% $$$ K = [f 0 px; 0 f py; 0 0 1];
% $$$ 
% $$$ % Camera rotation:
% $$$ t = sqrt(wx^2+wz^2)+EPS;
% $$$ nx = wx/t;
% $$$ nz = wz/t;
% $$$ N = [0 -nz 0; nz 0 -nx; 0 nx 0];
% $$$ R = eye(3) + sin(t)*N + (1-cos(t))*N*N;
% $$$ 
% $$$ % Get camera center:
% $$$ C = [0; Cy; 0];
% $$$ 
% $$$ % Get camera matrix:
% $$$ P = K*R*[eye(3) -C];
% $$$ 
% $$$ % Get horizon line:
% $$$ lh = cross(P(:,1),P(:,3));
% $$$ 
% $$$ % Get y-coordinate of horizon line:
% $$$ vy = -lh(3)/lh(2);
% $$$ 
% $$$ % Height error, weighted by uncertainty in object height and labeling error:
% $$$ w = 1./(sigma.*(vy-cy)./Cy+sigma_N); % Standard deviation
% $$$ F = w*(mu.*(vy-cy)./Cy - h);
% $$$ 
% $$$ % Jacobian:
% $$$ J = [diff(F,'Cy'); diff(F,'wx'); diff(F,'wz'); diff(F,'f'); diff(F,'px'); diff(F,'py')];
% $$$ 
% $$$ matlabFunction(J,'file','Jacobian_ObjectHeights.m');



% $$$ % Derivation for Jacobian_HorizonLine
% $$$ 
% $$$ % Camera parameters:
% $$$ syms f px py
% $$$ syms Cy wx wz EPS;
% $$$ 
% $$$ % Data:
% $$$ syms sigma_N
% $$$ syms Hx Hy;
% $$$ 
% $$$ % Get camera calibration matrix:
% $$$ K = [f 0 px; 0 f py; 0 0 1];
% $$$ 
% $$$ % Camera rotation:
% $$$ t = sqrt(wx^2+wz^2)+EPS;
% $$$ nx = wx/t;
% $$$ nz = wz/t;
% $$$ N = [0 -nz 0; nz 0 -nx; 0 nx 0];
% $$$ R = eye(3) + sin(t)*N + (1-cos(t))*N*N;
% $$$ 
% $$$ % Get camera center:
% $$$ C = [0; Cy; 0];
% $$$ 
% $$$ % Get camera matrix:
% $$$ P = K*R*[eye(3) -C];
% $$$ 
% $$$ % Horizon line:
% $$$ lh = cross(P(:,1),P(:,3));
% $$$ 
% $$$ % Distance to line:
% $$$ w = 1/sigma_N;
% $$$ F = w*(Hx*lh(1)+Hy*lh(2)+lh(3))/sqrt(lh(1)^2+lh(2)^2);
% $$$ 
% $$$ % Jacobian:
% $$$ J = [diff(F,'Cy'); diff(F,'wx'); diff(F,'wz'); diff(F,'f'); diff(F,'px'); diff(F,'py')];
% $$$ 
% $$$ matlabFunction(J,'file','Jacobian_HorizonLine.m');




% $$$ % Derivation for Jacobian_RightAnglesGround
% $$$ 
% $$$ % Camera parameters:
% $$$ syms f px py
% $$$ syms Cy wx wz EPS;
% $$$ 
% $$$ % Data:
% $$$ syms h cy mu sigma sigma_N
% $$$ syms lx ly lz x2 y2 x y
% $$$ 
% $$$ % Get camera calibration matrix:
% $$$ K = [f 0 px; 0 f py; 0 0 1];
% $$$ 
% $$$ % Camera rotation:
% $$$ t = sqrt(wx^2+wz^2)+EPS;
% $$$ nx = wx/t;
% $$$ nz = wz/t;
% $$$ N = [0 -nz 0; nz 0 -nx; 0 nx 0];
% $$$ R = eye(3) + sin(t)*N + (1-cos(t))*N*N;
% $$$ 
% $$$ % Get camera center:
% $$$ C = [0; Cy; 0];
% $$$ 
% $$$ % Get camera matrix:
% $$$ P = K*R*[eye(3) -C];
% $$$ 
% $$$ % Homography with ground plane:
% $$$ H = P(:,[1 3 4]);
% $$$ 
% $$$ % Line 1 in image:
% $$$ l1 = [lx; ly; lz];
% $$$ 
% $$$ % Get line 2 (perpendicular to line 1 on the world plane) in image:
% $$$ a = (transpose(H(:,1))*l1);
% $$$ b = (transpose(H(:,2))*l1);
% $$$ aa = a*(H(2,1)-H(3,1)*y2)+b*(H(2,2)-H(3,2)*y2);
% $$$ bb = a*(H(3,1)*x2-H(1,1))+b*(H(3,2)*x2-H(1,2));
% $$$ % $$$ theta = atan2(aa,bb); aa = sin(theta); bb = cos(theta);
% $$$ % $$$ cc = sqrt(aa^2+bb^2); aa = aa/cc; bb = bb/cc;
% $$$ l2 = [aa; bb; -x2*aa-y2*bb];
% $$$ % $$$ l2 = simplify(l2);
% $$$ 
% $$$ % $$$ % Get perpendicular distance of (x3,y3) to line 2:
% $$$ % $$$ w = 1./sigma_N;
% $$$ % $$$ F = w*(x*l2(1)+y*l2(2)+l2(3))/sqrt(l2(1)^2+l2(2)^2);
% $$$ % $$$ % $$$ F = w*sqrt(((x*l2(1)+y*l2(2)+l2(3))^2)/(l2(1)^2+l2(2)^2));
% $$$ % $$$ 
% $$$ % $$$ % Jacobian:
% $$$ % $$$ J = [diff(F,'Cy'); diff(F,'wx'); diff(F,'wz'); diff(F,'f')];
% $$$ 
% $$$ % Get components for perpendicular distance of (x3,y3) to line 2:
% $$$ F1 = x*l2(1)+y*l2(2)+l2(3);
% $$$ F2 = sqrt(l2(1)^2+l2(2)^2);
% $$$ 
% $$$ % Jacobian:
% $$$ J = [diff(F1,'Cy'); diff(F1,'wx'); diff(F1,'wz'); diff(F1,'f'); diff(F1,'px'); diff(F1,'py'); diff(F2,'Cy'); diff(F2,'wx'); diff(F2,'wz'); diff(F2,'f'); diff(F2,'px'); diff(F2,'py')];
% $$$ % $$$ J = [diff(F1,'Cy'); diff(F1,'wx'); diff(F1,'wz'); diff(F1,'f'); diff(F2,'Cy'); diff(F2,'wx'); diff(F2,'wz'); diff(F2,'f')];
% $$$ 
% $$$ matlabFunction(J,'file','Jacobian_RightAnglesGround.m');
